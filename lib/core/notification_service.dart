import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:permission_handler/permission_handler.dart';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _plugin =
      FlutterLocalNotificationsPlugin();
  static bool _ready = false;

  /// Inicializa o plugin, configura timezone e pede permiss√£o (Android 13+)
  static Future<void> initialize() async {
    if (_ready) return;

    try {
      tz.initializeTimeZones();

      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      const DarwinInitializationSettings initializationSettingsIOS =
          DarwinInitializationSettings(
            requestAlertPermission: true,
            requestBadgePermission: true,
            requestSoundPermission: true,
          );

      const InitializationSettings initSettings = InitializationSettings(
        android: initializationSettingsAndroid,
        iOS: initializationSettingsIOS,
      );

      await _plugin.initialize(initSettings);

      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
          _plugin
              .resolvePlatformSpecificImplementation<
                AndroidFlutterLocalNotificationsPlugin
              >();

      if (androidImplementation != null) {
        final bool? result = await androidImplementation
            .requestNotificationsPermission();
        print('üîî Permiss√£o de Notifica√ß√µes (visuais) habilitada: $result');

        const AndroidNotificationChannel channel = AndroidNotificationChannel(
          'task_channel',
          'Compromissos',
          description: 'Lembretes e compromissos do app MordoMo',
          importance: Importance.max,
          playSound: true,
          enableVibration: true,
        );
        await androidImplementation.createNotificationChannel(channel);
      } else {
        print(
          '‚ö†Ô∏è Implementa√ß√£o Android do plugin n√£o encontrada durante a inicializa√ß√£o.',
        );
      }

      _ready = true;
      print('‚úÖ NotificationService inicializado com sucesso');
    } catch (e, st) {
      print('‚ö†Ô∏è Erro ao inicializar NotificationService: $e');
      print(st);
    }
  }

  /// Verifica se a permiss√£o para agendar alarmes exatos est√° concedida.
  static Future<bool> canScheduleExactAlarms() async {
    final status = await Permission.scheduleExactAlarm.status;
    print('‚ÑπÔ∏è Status da permiss√£o SCHEDULE_EXACT_ALARM: $status');
    return status == PermissionStatus.granted;
  }

  /// Tenta abrir as configura√ß√µes de permiss√£o de alarmes exatos.
  static Future<void> openExactAlarmSettings() async {
    await openAppSettings();
    print(
      '‚ÑπÔ∏è Abrindo configura√ß√µes do app para que o usu√°rio possa conceder a permiss√£o.',
    );
  }

  /// Agenda uma notifica√ß√£o para uma data/hora espec√≠ficas
  static Future<bool> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
  }) async {
    try {
      if (!_ready) await initialize();

      if (scheduledDate.isBefore(DateTime.now())) {
        print('‚ö†Ô∏è Data no passado ($scheduledDate), n√£o ser√° agendada.');
        return false;
      }

      // =========================================================================
      // C√ìDIGO CORRIGIDO AQUI
      // =========================================================================
      final bool exactAlarmsPermitted = await canScheduleExactAlarms();
      if (!exactAlarmsPermitted) {
        print('! Falha: Permiss√£o para agendar alarmes exatos n√£o concedida.');
        print('! Solicitando ao usu√°rio para conceder a permiss√£o...');
        await openAppSettings(); // Abre as configura√ß√µes do app para o usu√°rio
        return false; // Retorna falso porque a permiss√£o ainda n√£o foi concedida
      }

      final AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
            'task_channel',
            'Compromissos',
            channelDescription: 'Lembretes e compromissos do app MordoMo',
            importance: Importance.max,
            priority: Priority.max,
            playSound: true,
            enableVibration: true,
            icon: '@mipmap/ic_launcher',
            showWhen: true,
            fullScreenIntent: true,
            category: AndroidNotificationCategory.reminder,
            visibility: NotificationVisibility.public,
          );

      const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
        sound: 'default',
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      final NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      final tz.TZDateTime scheduledTZDate = tz.TZDateTime.from(
        scheduledDate,
        tz.local,
      );

      await _plugin.zonedSchedule(
        id,
        title,
        body.isNotEmpty ? body : 'Voc√™ tem um compromisso agora!',
        scheduledTZDate,
        notificationDetails,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        matchDateTimeComponents: null,
      );
      // =========================================================================

      print('‚úÖ Notifica√ß√£o agendada para: $scheduledTZDate');
      return true;
    } catch (e, st) {
      print('‚ö†Ô∏è Falha ao agendar notifica√ß√£o: $e');
      print(st);
      return false;
    }
  }

  /// Cancela uma notifica√ß√£o espec√≠fica pelo id
  static Future<void> cancelNotification(int id) async {
    if (!_ready) await initialize();

    try {
      await _plugin.cancel(id);
      print('‚úÖ Notifica√ß√£o $id cancelada');
    } catch (e, st) {
      print('‚ö†Ô∏è Erro ao cancelar notifica√ß√£o $id: $e');
      print(st);
    }
  }

  /// Cancela todas as notifica√ß√µes agendadas
  static Future<void> cancelAllNotifications() async {
    if (!_ready) await initialize();

    try {
      await _plugin.cancelAll();
      print('‚úÖ Todas as notifica√ß√µes canceladas');
    } catch (e, st) {
      print('‚ö†Ô∏è Erro ao cancelar todas as notifica√ß√µes: $e');
      print(st);
    }
  }

  /// Recupera notifica√ß√µes pendentes para debug
  static Future<List<PendingNotificationRequest>>
  getPendingNotifications() async {
    if (!_ready) await initialize();

    try {
      final pending = await _plugin.pendingNotificationRequests();
      print('üìã Notifica√ß√µes pendentes: ${pending.length}');
      for (var notif in pending) {
        print(' - ID: ${notif.id} | Title: ${notif.title}');
      }
      return pending;
    } catch (e, st) {
      print('‚ö†Ô∏è Erro ao listar pendentes: $e');
      print(st);
      return [];
    }
  }

  /// Verifica se notifica√ß√µes visuais est√£o habilitadas no dispositivo
  static Future<bool> areNotificationsEnabled() async {
    if (!_ready) await initialize();

    try {
      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
          _plugin
              .resolvePlatformSpecificImplementation<
                AndroidFlutterLocalNotificationsPlugin
              >();
      final bool? enabled = await androidImplementation
          ?.areNotificationsEnabled();
      print('üîî Notifica√ß√µes (visuais) habilitadas: ${enabled ?? true}');
      return enabled ?? true;
    } catch (e, st) {
      print('‚ö†Ô∏è Erro ao checar habilita√ß√£o de notifica√ß√µes visuais: $e');
      print(st);
      return false;
    }
  }
}
